// Code generated by MockGen. DO NOT EDIT.
// Source: urlRepository.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	models "ShortLink/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockUrler is a mock of Urler interface.
type MockUrler struct {
	ctrl     *gomock.Controller
	recorder *MockUrlerMockRecorder
}

// MockUrlerMockRecorder is the mock recorder for MockUrler.
type MockUrlerMockRecorder struct {
	mock *MockUrler
}

// NewMockUrler creates a new mock instance.
func NewMockUrler(ctrl *gomock.Controller) *MockUrler {
	mock := &MockUrler{ctrl: ctrl}
	mock.recorder = &MockUrlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrler) EXPECT() *MockUrlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrler) Create(u *models.URLStorage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUrlerMockRecorder) Create(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrler)(nil).Create), u)
}

// CreateTx mocks base method.
func (m *MockUrler) CreateTx(tx *sqlx.Tx, u *models.URLStorage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", tx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockUrlerMockRecorder) CreateTx(tx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockUrler)(nil).CreateTx), tx, u)
}

// GetByLongLink mocks base method.
func (m *MockUrler) GetByLongLink(longLink string) (*models.URLStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongLink", longLink)
	ret0, _ := ret[0].(*models.URLStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongLink indicates an expected call of GetByLongLink.
func (mr *MockUrlerMockRecorder) GetByLongLink(longLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongLink", reflect.TypeOf((*MockUrler)(nil).GetByLongLink), longLink)
}

// GetByLongLinkTx mocks base method.
func (m *MockUrler) GetByLongLinkTx(tx *sqlx.Tx, longLink string) (*models.URLStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongLinkTx", tx, longLink)
	ret0, _ := ret[0].(*models.URLStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongLinkTx indicates an expected call of GetByLongLinkTx.
func (mr *MockUrlerMockRecorder) GetByLongLinkTx(tx, longLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongLinkTx", reflect.TypeOf((*MockUrler)(nil).GetByLongLinkTx), tx, longLink)
}

// GetByShortLink mocks base method.
func (m *MockUrler) GetByShortLink(shortLink string) (*models.URLStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortLink", shortLink)
	ret0, _ := ret[0].(*models.URLStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortLink indicates an expected call of GetByShortLink.
func (mr *MockUrlerMockRecorder) GetByShortLink(shortLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortLink", reflect.TypeOf((*MockUrler)(nil).GetByShortLink), shortLink)
}

// GetByShortLinkTx mocks base method.
func (m *MockUrler) GetByShortLinkTx(tx *sqlx.Tx, shortLink string) (*models.URLStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortLinkTx", tx, shortLink)
	ret0, _ := ret[0].(*models.URLStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortLinkTx indicates an expected call of GetByShortLinkTx.
func (mr *MockUrlerMockRecorder) GetByShortLinkTx(tx, shortLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortLinkTx", reflect.TypeOf((*MockUrler)(nil).GetByShortLinkTx), tx, shortLink)
}
